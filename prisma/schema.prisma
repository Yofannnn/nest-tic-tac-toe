// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversations  UserOnConversation[]
  sentMessages   DirectMessage[] @relation("SenderMessages")

  friendsRequested Friend[] @relation("UserFriends")
  friendsReceived  Friend[] @relation("FriendUsers")
}

model Room {
  id          Int      @id @default(autoincrement())
  name        String
  player1_id  Int
  player2_id  Int?
  status      String   @default("waiting")
  password    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GameState {
  id        Int     @id @default(autoincrement())
  room_id   Int     @unique
  board     String
  turn      Int     
  status    String  @default("active")
  winner    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MatchHistory {
  id            Int      @id @default(autoincrement())
  room_id       Int      @unique
  player1_id    Int
  player2_id    Int
  player1_score Int      @default(0)
  player2_score Int      @default(0)
  draw_score    Int      @default(0)
  duration      Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model GameMoves {
  id            Int      @id @default(autoincrement())
  room_id       Int
  player_id     Int
  position      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model GameChat {
  id          Int       @id @default(autoincrement())
  room_id     Int
  player_id   Int
  message     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Friend {
  id        Int      @id @default(autoincrement())
  user_id   Int
  friend_id Int
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation("UserFriends", fields: [user_id], references: [id], onDelete: Cascade)
  friend User @relation("FriendUsers", fields: [friend_id], references: [id], onDelete: Cascade)

  @@unique([user_id, friend_id])
}

model Conversation {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())

  messages      DirectMessage[]
  participants  UserOnConversation[]
}

model UserOnConversation {
  user_id         Int
  conversation_id Int
  createdAt       DateTime      @default(now())
  deleted_at      DateTime?

  user            User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  conversation    Conversation  @relation(fields: [conversation_id], references: [id], onDelete: Cascade)

  @@id([user_id, conversation_id])
  @@index([conversation_id])
}

model DirectMessage {
  id              Int          @id @default(autoincrement())
  conversation_id Int
  sender_id       Int
  message         String
  isRead          Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  conversation    Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  sender          User         @relation("SenderMessages", fields: [sender_id], references: [id], onDelete: Cascade)

  @@index([conversation_id])
}
